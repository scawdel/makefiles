# Copyright 2013-2016, Stephen Fryatt (info@stevefryatt.org.uk)
#
# This file is part of SFTools Shared Makefiles:
#
#   http://www.stevefryatt.org.uk/software/
#
# Licensed under the EUPL, Version 1.1 only (the "Licence");
# You may not use this work except in compliance with the
# Licence.
#
# You may obtain a copy of the Licence at:
#
#   http://joinup.ec.europa.eu/software/page/eupl
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the Licence is
# distributed on an "AS IS" basis, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the Licence for the specific language governing
# permissions and limitations under the Licence.

# Shared Makefile for AsAsm-based Modules
#
# This file really needs to be run by GNUMake.
# It is intended for native compilation on Linux (for use in a GCCSDK
# environment) or cross-compilation under the GCCSDK.
#
# Set VERSION to build using a version number and not an SVN revision.

.PHONY: all clean application documentation release backup

# Target Details

ARCHIVE ?= application
PACKAGE ?=
APP ?=
MODULE ?= Module,ffa
TEXTHELP ?= !Help,fff
README ?= ReadMe,fff
LICENSE ?= Licence,fff
ADDITIONS ?=
EXTRASRC ?=
EXTRAPREREQ ?=
EXTRASRCPREREQ ?=

# Set up the source files.

MANSRC ?= Source
MANSPR ?= ManSprite
READMEHDR ?= Header

OBJS ?= Source.o

# Set up the various build directories.

SRCDIR := src
MANUAL := manual
OBJDIR := obj
OUTDIR := build

# Set up additional build options

ASOPTIONS ?=

# Build Tools

AS := $(wildcard $(GCCSDK_INSTALL_CROSSBIN)/*asasm)
STRIP := $(wildcard $(GCCSDK_INSTALL_CROSSBIN)/*strip)
ECHO := echo
CC := gcc
MKDIR := mkdir -p
RM := rm -rf
CP := cp
CD := cd
ZIP := $(GCCSDK_INSTALL_ENV)/bin/zip
MANTOOLS := $(SFTOOLS_BIN)/mantools
BINDHELP := $(SFTOOLS_BIN)/bindhelp
TEXTMERGE := $(SFTOOLS_BIN)/textmerge
MENUGEN := $(SFTOOLS_BIN)/menugen

# Build Flags

ASFLAGS :=
STRIPFLAGS := -O binary
ZIPFLAGS := -x "*/.svn/*" -r -, -9
SRCZIPFLAGS := -x "*/.svn/*" -r -9
BUZIPFLAGS := -x "*/.svn/*" -r -9
BINDHELPFLAGS := -f -r -v

# Set up escape sequences for colouring terminal output.

COLOUR_ACTION := \033[1;32m
COLOUR_END := \033[0m

# The build date.

BUILD_DATE := $(shell date "+%d %b %Y")
HELP_DATE := $(shell date "+%-d %B %Y")

# Construct version or revision information.

ifeq ($(VERSION),)
  RELEASE := $(shell svnversion --no-newline)
  VERSION := r$(RELEASE)
  RELEASE := $(subst :,-,$(RELEASE))
  HELP_VERSION := ----
ifneq ($(PACKAGE),)
  PACKAGE := $(PACKAGE)Unstable
  PKG_VERSION := $(shell $(GETPKGREV) --index unstable --package $(PACKAGE) --revision $(VERSION))
endif
else
  RELEASE := $(subst .,,$(VERSION))
  HELP_VERSION := $(VERSION)
ifneq ($(PACKAGE),)
  PKG_VERSION := $(shell $(GETPKGREV) --index stable --package $(PACKAGE) --revision $(VERSION))
endif
endif

# The archives to assemble the release files, sources and backups in.
# If $(RELEASE) is set, then the file can be given a version number suffix.

ZIPFILE := $(ARCHIVE)$(RELEASE).zip
SRCZIPFILE := $(ARCHIVE)$(RELEASE)src.zip
PKGZIPFILE := $(PACKAGE)_$(PKG_VERSION).zip
BUZIPFILE := $(ARCHIVE)$(shell date "+%Y%m%d").zip

# Inform the user what we're about to do.

$(info *** Building with version $(VERSION) ($(RELEASE)) on date $(BUILD_DATE) ***)

# Build everything, but don't package it for release.

all: application documentation

# Build the application and its supporting binary files.

application: $(OUTDIR)/$(if $(APP),$(APP)/)$(MODULE) $(EXTRAPREREQ)

# Build the complete Module from the object files.

OBJS := $(addprefix $(OBJDIR)/, $(OBJS))

$(OUTDIR)/$(if $(APP),$(APP)/)$(MODULE): $(OBJS)
	@$(ECHO) "$(COLOUR_ACTION)*         STRIPPING: $(OUTDIR)/$(if $(APP),$(APP)/)$(MODULE)$(COLOUR_END)"
	@$(STRIP) $(STRIPFLAGS) -o $(OUTDIR)/$(if $(APP),$(APP)/)$(MODULE) $(OBJS)

# Build the object files, and identify their dependencies.

$(OBJDIR)/%.o: $(SRCDIR)/%.s $(EXTRASRCPREREQ)
	@$(ECHO) "$(COLOUR_ACTION)*        ASSEMBLING: $<$(COLOUR_END)"
	@$(MKDIR) $(@D)
	@$(AS) $(ASFLAGS) $(ASOPTIONS) -PreDefine 'Include SETS "$(GCCSDK_INSTALL_ENV)/include"' -PreDefine 'BuildDate SETS "\"$(BUILD_DATE)\""' -PreDefine 'BuildVersion SETS "\"$(VERSION)\""' -o $@ $<

# Build the documentation

documentation: $(OUTDIR)/$(README) $(if $(APP),$(OUTDIR)/$(APP)/$(TEXTHELP))

ifneq ($(and $(APP),$(TEXTHELP)),)
$(OUTDIR)/$(APP)/$(TEXTHELP): $(MANUAL)/$(MANSRC)
	@$(ECHO) "$(COLOUR_ACTION)*       TEXT MANUAL: $(OUTDIR)/$(APP)/$(TEXTHELP)$(COLOUR_END)"
	@$(MANTOOLS) -MTEXT -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(APP)/$(TEXTHELP) -D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'

$(OUTDIR)/$(README): $(OUTDIR)/$(APP)/$(TEXTHELP) $(MANUAL)/$(READMEHDR)
	@$(ECHO) "$(COLOUR_ACTION)*     CREATE README: $(OUTDIR)/$(README)$(COLOUR_END)"
	@$(TEXTMERGE) $(OUTDIR)/$(README) $(OUTDIR)/$(APP)/$(TEXTHELP) $(MANUAL)/$(READMEHDR) 5
else
$(OUTDIR)/$(README): $(MANUAL)/$(MANSRC)
	@$(ECHO) "$(COLOUR_ACTION)*       TEXT MANUAL: $(OUTDIR)/$(README)$(COLOUR_END)"
	@$(MANTOOLS) -MTEXT -I$(MANUAL)/$(MANSRC) -O$(OUTDIR)/$(README) -D'version=$(HELP_VERSION)' -D'date=$(HELP_DATE)'
endif

# Build the release Zip file.

release: clean all
	@$(ECHO) "$(COLOUR_ACTION)*   ZIPPING RELEASE: $(ZIPFILE)$(COLOUR_END)"
	@$(RM) ../$(ZIPFILE)
	@($(CD) $(OUTDIR) ; $(ZIP) $(ZIPFLAGS) ../../$(ZIPFILE) $(if $(APP),$(APP),$(MODULE)) $(README) $(LICENSE) $(ADDITIONS))
ifneq ($(PACKAGE),)
	@$(ECHO) "$(COLOUR_ACTION)*   ZIPPING PACKAGE: $(PKGZIPFILE)$(COLOUR_END)"
	@$(RM) ../$(PKGZIPFILE)
	@$(RM) $(OUTDIR)/package/Apps/Misc/*
	@($(CD) $(OUTDIR) ; rsync -av --exclude=*.svn* $(APP) package/Apps/Misc/ )
	@$(MAKECONTROL) --template $(PKGDIR)/$(PKGCTRL) --control $(OUTDIR)/package/RiscPkg/Control --version $(PKG_VERSION)
	@($(CD) $(OUTDIR)/package ; $(ZIP) $(PKGZIPFLAGS) ../../../$(PKGZIPFILE) Apps RiscPkg Sprites SysVars)
endif
	@$(ECHO) "$(COLOUR_ACTION)*    ZIPPING SOURCE: $(SRCZIPFILE)$(COLOUR_END)"
	@$(RM) ../$(SRCZIPFILE)
	@$(ZIP) $(SRCZIPFLAGS) ../$(SRCZIPFILE) Makefile $(OUTDIR) $(SRCDIR) $(MANUAL) $(EXTRASRC)


# Build a backup Zip file

backup:
	@$(ECHO) "$(COLOUR_ACTION)*    ZIPPING BACKUP: $(BUZIPFILE)$(COLOUR_END)"
	@$(RM) ../$(BUZIPFILE)
	@$(ZIP) $(BUZIPFLAGS) ../$(BUZIPFILE) *


# Clean targets

clean::
	@$(ECHO) "$(COLOUR_ACTION)*          CLEANING$(COLOUR_END)"
	$(RM) $(OBJDIR)/*
ifneq ($(APP),)
	$(RM) $(OUTDIR)/$(APP)/$(MODULE)
ifneq ($(TEXTHELP),)
	$(RM) $(OUTDIR)/$(APP)/$(TEXTHELP)
endif
else
	$(RM) $(OUTDIR)/$(MODULE)
endif
	$(RM) $(OUTDIR)/$(README)

